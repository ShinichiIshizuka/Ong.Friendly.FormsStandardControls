<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Codeer.Friendly.Windows.NativeStandardControls</name>
    </assembly>
    <members>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.TVITEM">
            <summary>
            MSDNのTVITEMを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.TVITEMEX">
            <summary>
            MSDNのTVITEMを参照お願いします。
            文字列取得の場合は最適なサイズをライブラリ側で確保するため、cchTextMaxは使用しません。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.TVITEMEX_CORE">
            <summary>
            MSDNのTVITEMを参照お願いします。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.TVITEMEX_CORE.GetTVITEMEX(Codeer.Friendly.Windows.NativeStandardControls.TVITEM@)">
            <summary>
            TVITEMの部分を取得します。
            </summary>
            <param name="item">TVITEMの部分。</param>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NMDATETIMECHANGE">
            <summary>
            MSDNのNMDATETIMECHANGEを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeTree">
            <summary>
            WindowClassがSysTreeView32のウィンドウに対応した操作を提供します。
            </summary>    
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeWindow">
            <summary>
            ネイティブウィンドウ基本クラスです。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeWindow.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeWindow.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeWindow.Visible">
            <summary>
            表示状態であるか。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeWindow.Enabled">
            <summary>
            有効状態であるか。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.GetChildNodes(System.IntPtr)">
            <summary>
            指定のアイテムの子ノードを取得します。
            </summary>
            <param name="hParentItem">親アイテムハンドル。</param>
            <returns>子ノードのアイテムハンドル。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.GetBrotherNodes(System.IntPtr)">
            <summary>
            指定のアイテムと同列のノードを取得します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <returns>指定のアイテムと同列のノードのアイテムハンドル。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.GetParentNode(System.IntPtr)">
            <summary>
            親ノードを取得します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <returns>親ノードのアイテムハンドル。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.FindNode(System.String[])">
            <summary>
            ノードを検索します。
            </summary>
            <param name="nodeText">各ノードのテキスト。</param>
            <returns>検索されたノードのアイテムハンドル。未発見時はIntPtr.Zeroが返ります。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.FindNode(System.Int32[])">
            <summary>
            ノードを検索します。
            </summary>
            <param name="nodeIndex">各ノードでのインデックス。</param>
            <returns>検索されたノードのアイテムハンドル。未発見時はIntPtr.Zeroが返ります。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.GetItem(Codeer.Friendly.Windows.NativeStandardControls.TVITEMEX)">
            <summary>
            アイテム情報を取得します。
            </summary>
            <param name="item">アイテム情報。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.GetItemText(System.IntPtr)">
            <summary>
            アイテム文字列を取得します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <returns>アイテム文字列。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.GetItemData(System.IntPtr)">
            <summary>
            アイテムデータを取得します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <returns>アイテムデータ。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.GetItemRect(System.IntPtr,System.Boolean)">
            <summary>
            アイテム矩形を取得します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <param name="isTextOnly">テキスト部分のみの取得であるか。</param>
            <returns>アイテム矩形。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.IsExpanded(System.IntPtr)">
            <summary>
            指定のアイテムが展開状態であるかを取得します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <returns>指定のアイテムが展開状態であるか。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.IsChecked(System.IntPtr)">
            <summary>
            指定のアイテムがチェック状態であるかを取得します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <returns>チェック状態であるか。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EnsureVisible(System.IntPtr)">
            <summary>
            指定のアイテムを可視状態にします。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateChangeItem(Codeer.Friendly.Windows.NativeStandardControls.TVITEMEX)">
            <summary>
            アイテム情報を設定します。
            状態にかかわる情報が変化した場合、コントロールの設定によっては、TVN_ITEMCHANGING、TVN_ITEMCHANGEDの通知が発生します。
            </summary>
            <param name="item">アイテム情報。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateChangeItem(Codeer.Friendly.Windows.NativeStandardControls.TVITEMEX,Codeer.Friendly.Async)">
            <summary>
            アイテム情報を設定します。
            状態にかかわる情報が変化した場合、コントロールの設定によっては、TVN_ITEMCHANGING、TVN_ITEMCHANGEDの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="item">アイテム情報。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateExpand(System.IntPtr,System.Boolean)">
            <summary>
            指定のアイテムの展開状態を変更します。
            展開状態に変化があれば、TVN_ITEMEXPANDING、TVN_ITEMEXPANDEDの通知が発生します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <param name="isExpanded">展開状態にするか</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateExpand(System.IntPtr,System.Boolean,Codeer.Friendly.Async)">
            <summary>
            指定のアイテムの展開状態を変更します。
            展開状態に変化があれば、TVN_ITEMEXPANDING、TVN_ITEMEXPANDEDの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <param name="isExpanded">展開状態にするか</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateCheck(System.IntPtr,System.Boolean)">
            <summary>
            指定のアイテムをチェック状態にします。
            チェック状態が変わった場合、コントロールの設定によっては、TVN_ITEMCHANGING、TVN_ITEMCHANGEDの通知が発生します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <param name="check">チェック。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateCheck(System.IntPtr,System.Boolean,Codeer.Friendly.Async)">
            <summary>
            指定のアイテムをチェック状態にします。
            チェック状態が変わった場合、コントロールの設定によっては、TVN_ITEMCHANGING、TVN_ITEMCHANGEDの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <param name="check">チェック。</param>
            <param name="async">非同期実行オブジェクト。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateSelectItem(System.IntPtr)">
            <summary>
            指定のアイテムを選択状態にします。
            選択状態が変化した場合、TVN_SELCHANGING、TVN_SELCHANGEDの通知が発生します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateSelectItem(System.IntPtr,Codeer.Friendly.Async)">
            <summary>
            指定のアイテムを選択状態にします。
            選択状態が変化した場合、TVN_SELCHANGING、TVN_SELCHANGEDの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateEdit(System.IntPtr,System.String)">
            <summary>
            指定のアイテムを編集します。
            TVN_BEGINLABELEDIT、TVN_ENDLABELEDITが発生します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <param name="text">テキスト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateEdit(System.IntPtr,System.String,Codeer.Friendly.Async)">
            <summary>
            指定のアイテムを編集します。
            TVN_BEGINLABELEDIT、TVN_ENDLABELEDITが発生します。
            非同期で実行します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <param name="text">テキスト。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateCancelEdit">
            <summary>
            編集キャンセル。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateCancelEdit(Codeer.Friendly.Async)">
            <summary>
             編集キャンセル。
            </summary>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.GetItemInTarget(System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.TVITEMEX)">
            <summary>
            アイテム情報を取得します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="item">アイテム情報。</param>
            <returns>アイテム。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.GetRootNodesInTarget(System.IntPtr)">
            <summary>
            トップレベルのノードのアイテムハンドルを取得します。
            </summary>
            <param name="wndHandle">ウィンドウハンドル。</param>
            <returns>トップレベルのノードのアイテムハンドル。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.GetChildNodesInTarget(System.IntPtr,System.IntPtr)">
            <summary>
            指定のアイテムの子ノードを取得します。
            </summary>
            <param name="wndHandle">ウィンドウハンドル。</param>
            <param name="hParentItem">親アイテムハンドル。</param>
            <returns>子ノードのアイテムハンドル。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.GetBrotherNodesInTarget(System.IntPtr,System.IntPtr)">
            <summary>
            指定のアイテムと同列のノードを取得します。
            </summary>
            <param name="wndHandle">ウィンドウハンドル。</param>
            <param name="hItem">アイテムハンドル。</param>
            <returns>指定のアイテムと同列のノードのアイテムハンドル。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.FindNodeInTarget(System.IntPtr,System.String[])">
            <summary>
            ノードを検索します。
            </summary>
            <param name="wndHandle">ウィンドウハンドル。</param>
            <param name="nodeText">各ノードのテキスト。</param>
            <returns>検索されたノードのアイテムハンドル。未発見時はIntPtr.Zeroが返ります。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.FindNodeInTarget(System.IntPtr,System.Int32[])">
            <summary>
            ノードを検索します。
            </summary>
            <param name="wndHandle">ウィンドウハンドル。</param>
            <param name="nodeIndex">各ノードでのインデックス。</param>
            <returns>検索されたノードのアイテムハンドル。未発見時はIntPtr.Zeroが返ります。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.GetNextItemInTarget(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            hItemとcodeで指定された関係のアイテムを取得します。
            </summary>
            <param name="treeeHandle">ツリーのウィンドウハンドル。</param>
            <param name="hItem">アイテムハンドル。</param>
            <param name="code">取得する種類。</param>
            <returns>hItemとcodeで指定された関係のアイテム。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateChangeItemInTarget(System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.TVITEMEX)">
            <summary>
            アイテム情報を設定します。
            状態にかかわる情報が変化した場合、コントロールの設定によっては、TVN_ITEMCHANGING、TVN_ITEMCHANGEDの通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="item">アイテム情報。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.CreateCheckChangeItem(System.IntPtr,System.Boolean)">
            <summary>
            チェック状態を変更するためのアイテムを作成します。
            </summary>
            <param name="hItem">アイテムハンドル。</param>
            <param name="check">チェック状態。</param>
            <returns>アイテム。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateExpandInTarget(System.IntPtr,System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            指定のアイテムの展開状態を変更します。
            展開状態に変化があれば、TVN_ITEMEXPANDING、TVN_ITEMEXPANDEDの通知が発生します。
            </summary>
            <param name="wndHandle">ウィンドウハンドル。</param>
            <param name="hItem">アイテムハンドル。</param>
            <param name="isExpanded">現在の展開状態。</param>
            <param name="isExpandedNext">次の展開状態。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.NotifyExpandInTarget(System.Boolean,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            展開通知
            </summary>
            <param name="isBefore">展開前通知であるか。</param>
            <param name="wndHandle">ウィンドウハンドル。</param>
            <param name="hItem">アイテムハンドル。</param>
            <param name="action">動作。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.IsExpandedOnce(System.IntPtr,System.IntPtr)">
            <summary>
            指定のアイテムが展開状態であるかを取得します。
            </summary>
            <param name="wndHandle">ウィンドウハンドル。</param>
            <param name="hItem">アイテムハンドル。</param>
            <returns>指定のアイテムが展開状態であるか。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateEditInTarget(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            指定のアイテムを編集します。
            TVN_BEGINLABELEDIT、TVN_ENDLABELEDITが発生します。
            非同期で実行します。
            </summary>
            <param name="windowHandle">ウィンドウハンドル。</param>
            <param name="hItem">アイテムハンドル。</param>
            <param name="text">テキスト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.EmulateSelectItemInTarget(System.IntPtr,System.IntPtr)">
            <summary>
            指定のアイテムを選択状態にします。
            選択状態が変化した場合、TVN_SELCHANGING、TVN_SELCHANGEDの通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="hItem">アイテムハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.IsCheckedInTarget(System.IntPtr,System.IntPtr)">
            <summary>
            指定のアイテムがチェック状態であるかを取得します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="hItem">アイテムハンドル。</param>
            <returns>チェック状態であるか。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.IsExpandedInTarget(System.IntPtr,System.IntPtr)">
            <summary>
            指定のアイテムが展開状態であるかを取得します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="hItem">アイテムハンドル。</param>
            <returns>指定のアイテムが展開状態であるか。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.GetItemTextInTarget(System.IntPtr,System.IntPtr)">
            <summary>
            アイテムテキストの取得。
            </summary>
            <param name="Handle">ウィンドウハンドル。</param>
            <param name="hItem">アイテムハンドル。</param>
            <returns>アイテムテキスト。</returns>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.SelectedItem">
            <summary>
            選択されているアイテムハンドルです。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeTree.Nodes">
            <summary>
            トップレベルのノードのアイテムハンドルです。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility">
            <summary>
            ネイティブデータ変換ユーティリティー
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility.ToIntPtr(System.Boolean)">
            <summary>
            boolからIntPtrへ変換。
            </summary>
            <param name="value">bool。</param>
            <returns>IntPtr。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility.ToBool(System.IntPtr)">
            <summary>
            IntPtrからbooへ変換。
            </summary>
            <param name="value">IntPtr。</param>
            <returns>bool。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility.MAKELONG(System.Int32,System.Int32)">
            <summary>
            32bit値を作成します。
            </summary>
            <param name="lower">下位ワード。</param>
            <param name="upper">上位ワード。</param>
            <returns>32bit値。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility.MAKELPARAM(System.Int32,System.Int32)">
            <summary>
            32bit値を作成します。
            </summary>
            <param name="lower">下位ワード。</param>
            <param name="upper">上位ワード。</param>
            <returns>32bit値。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility.MAKEWORD(System.Int32,System.Int32)">
            <summary>
            16bit値を作成します。
            </summary>
            <param name="lower">下位バイト。</param>
            <param name="upper">上位バイト。</param>
            <returns>16bit値</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility.MAKEIPADDRESS(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            IPアドレス作成。
            </summary>
            <param name="field0">フィールド0</param>
            <param name="field1">フィールド1</param>
            <param name="field2">フィールド2</param>
            <param name="field3">フィールド3</param>
            <returns>IPアドレス。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility.MAKEIPRANGE(System.Byte,System.Byte)">
            <summary>
            IPアドレスの範囲を作成。
            </summary>
            <param name="lower">下限。</param>
            <param name="upper">上限。</param>
            <returns>IPアドレスの範囲。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility.ToRectangle(Codeer.Friendly.Windows.NativeStandardControls.RECT)">
            <summary>
            RECT→Rectangle変換。
            </summary>
            <param name="rect">RECT。</param>
            <returns>Rectangle。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility.ToSYSTEMTIME(System.DateTime)">
            <summary>
            DateTime→SYSTEMTIME変換。
            </summary>
            <param name="time">DateTime。</param>
            <returns>SYSTEMTIME。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility.ToDateTime(Codeer.Friendly.Windows.NativeStandardControls.SYSTEMTIME)">
            <summary>
            SYSTEMTIME→DateTime変換。
            </summary>
            <param name="time">SYSTEMTIME。</param>
            <returns>DateTime。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility.HIWORD(System.Int32)">
            <summary>
            上位ワード取得。
            </summary>
            <param name="value">32bit値。</param>
            <returns>上位ワード。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility.LOWORD(System.Int32)">
            <summary>
            下位ワード取得。
            </summary>
            <param name="value">32bit値。</param>
            <returns>下位ワード。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility.ToColor(System.IntPtr)">
            <summary>
            IntPtr→Colorに変換。
            </summary>
            <param name="value">IntPtr。</param>
            <returns>Color。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeDataUtility.ToIntPtr(System.Drawing.Color)">
            <summary>
            Color→IntPtrに変換。
            </summary>
            <param name="color">Color。</param>
            <returns>IntPtr。</returns>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NMTREEVIEW">
            <summary>
            MSDNのNMTREEVIEWを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeTab">
            <summary>
            WindowClassがSysTabControl32のウィンドウに対応した操作を提供します。
            </summary>    
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTab.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTab.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTab.GetItemText(System.Int32)">
            <summary>
            文字列を取得します。
            </summary>
            <param name="tabIndex">タブインデックス。</param>
            <returns>タブ文字列。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTab.GetItemData(System.Int32)">
            <summary>
            アイテムデータを取得します。
            </summary>
            <param name="tabIndex">タブインデックス。</param>
            <returns>アイテムデータ。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTab.GetItem(System.Int32,Codeer.Friendly.Windows.NativeStandardControls.TCITEM)">
            <summary>
            アイテムを取得します。
            </summary>
            <param name="tabIndex">タブインデックス</param>
            <param name="item">アイテム格納バッファ</param>
            <returns>成否</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTab.EmulateSelectItem(System.Int32)">
            <summary>
            タブを選択します。
            選択位置の変更があった場合、TCN_SELCHANGING、TCN_SELCHANGEの通知が発生します。
            </summary>
            <param name="index">アイテムのインデックス。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTab.EmulateSelectItem(System.Int32,Codeer.Friendly.Async)">
            <summary>
            タブを選択します。
            選択位置の変更があった場合、TCN_SELCHANGING、TCN_SELCHANGEの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="index">アイテムのインデックス。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTab.GetItemInTarget(System.IntPtr,System.Int32,Codeer.Friendly.Windows.NativeStandardControls.TCITEM)">
            <summary>
            アイテムを取得します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="tabIndex">タブインデックス。</param>
            <param name="item">アイテム。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTab.EmulateSelectItemInTarget(System.IntPtr,System.Int32)">
            <summary>
            タブを選択します。
            選択位置の変更があった場合、TCN_SELCHANGING、TCN_SELCHANGEの通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="index">アイテムのインデックス。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTab.SendNotify(System.IntPtr,System.Int32)">
            <summary>
            WM_NOTIFYを通知します。
            対象アプリケーション内部で実行する必要があります。
            </summary>
            <param name="handle">ハンドル。</param>
            <param name="code">通知コード。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeTab.GetSelectedItemIndexInTarget(System.IntPtr)">
            <summary>
            現在選択されているタブのインデックスを取得。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <returns>現在選択されているタブのインデックス。</returns>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeTab.ItemCount">
            <summary>
            タブ数を取得します。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeTab.SelectedItemIndex">
            <summary>
            現在選択されているタブのインデックスです。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox">
            <summary>
            WindowClassがListBoxのウィンドウに対応した操作を提供します。
            </summary>    
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.GetItemData(System.Int32)">
            <summary>
            アイテムデータを取得します。
            </summary>
            <param name="index">インデックス。</param>
            <returns>アイテムデータ。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.GetItemText(System.Int32)">
            <summary>
            指定のインデックスのテキストを取得します。
            </summary>
            <param name="index">インデックス。</param>
            <returns>テキスト。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.FindItem(System.Int32,System.String)">
            <summary>
            指定のテキストのアイテムを検索します。
            </summary>
            <param name="findStart">検索開始インデックス。</param>
            <param name="text">テキスト。</param>
            <returns>アイテムインデックス。未発見時は-1が返ります。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.GetItemRect(System.Int32)">
            <summary>
            指定のインデックスのアイテムのクライアント矩形を取得します。
            </summary>
            <param name="index">インデックス。</param>
            <returns>失敗時は-1が返ります。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.SetTopIndex(System.Int32)">
            <summary>
            リストボックスに表示される文字列の先頭インデックスを設定します。
            先頭になれない場合は、表示領域に指定のインデックスのアイテムが入るようにスクロールされます。
            </summary>
            <param name="index">先頭インデックス。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.EmulateChangeCurrentSelectedIndex(System.Int32)">
            <summary>
            現在選択されているインデックスを設定します。
            LBN_SELCHANGEの通知が発生します。
            複数選択リストボックスの場合はEmulateChangeSelectを使用してください。
            </summary>
            <param name="index">選択インデックス。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.EmulateChangeCurrentSelectedIndex(System.Int32,Codeer.Friendly.Async)">
            <summary>
            現在選択されているインデックスを設定します。
            LBN_SELCHANGEの通知が発生します。
            複数選択リストボックスの場合はEmulateChangeSelectを使用してください。
            非同期で実行します。
            </summary>
            <param name="index">選択インデックス。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.EmulateChangeSelect(System.Int32,System.Boolean)">
            <summary>
            指定のインデックスのアイテムの選択状態を変更します。
            LBN_SELCHANGEの通知が発生します。
            単一選択リストボックスの場合はEmulateChangeCurrentSelectedIndexInTargetを使用してください。
            </summary>
            <param name="index">インデックス。</param>
            <param name="isSelect">選択状態にする場合はtrueを設定します。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.EmulateChangeSelect(System.Int32,System.Boolean,Codeer.Friendly.Async)">
            <summary>
            指定のインデックスのアイテムの選択状態を変更します。
            LBN_SELCHANGEの通知が発生します。
            単一選択リストボックスの場合はEmulateChangeCurrentSelectedIndexInTargetを使用してください。
            非同期で実行します。
            </summary>
            <param name="index">インデックス。</param>
            <param name="isSelect">選択状態にする場合はtrueを設定します。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.GetSelectedIndicesInTarget(System.IntPtr)">
            <summary>
            現在選択されているアイテムのインデックスの配列です。
            単一選択リストボックスの場合はCurrentSelectedIndexを使用してください。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <returns>現在選択されているアイテムのインデックスの配列。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.FindItemInTarget(System.IntPtr,System.Int32,System.String)">
            <summary>
            指定のテキストのアイテムを検索します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="findStart">検索開始インデックス。</param>
            <param name="text">テキスト。</param>
            <returns>アイテムインデックス。未発見時は-1が返ります。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.GetTextInTarget(System.IntPtr,System.Int32)">
            <summary>
            指定のインデックスのテキストを取得します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="index">インデックス。</param>
            <returns>テキスト。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.EmulateChangeCurrentSelectedIndexInTarget(System.IntPtr,System.Int32)">
            <summary>
            現在選択されているインデックスを設定します。
            LBN_SELCHANGEの通知が発生します。
            複数選択リストボックスの場合はEmulateChangeSelectを使用してください。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="index">選択インデックス。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.EmulateChangeSelectInTarget(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            指定のインデックスのアイテムの選択状態を変更します。
            LBN_SELCHANGEの通知が発生します。
            単一選択リストボックスの場合はEmulateChangeCurrentSelectedIndexInTargetを使用してください。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="index">インデックス。</param>
            <param name="isSelect">選択状態にする場合はtrueを設定します。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.GetCurrentSelectedIndexInTarget(System.IntPtr)">
            <summary>
            現在の選択インデックスを取得する。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <returns>現在の選択インデックス。</returns>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.Count">
            <summary>
            アイテム数です。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.CurrentSelectedIndex">
            <summary>
            現在選択されているアイテムのインデックスです。
            複数選択リストボックスの場合はItemSelectedIndicesを使用してください。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.SelectedIndices">
            <summary>
            現在選択されているアイテムのインデックスの配列です。
            単一選択リストボックスの場合はCurrentSelectedIndexを使用してください。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeListBox.TopIndex">
            <summary>
            リストボックスに表示される文字列の先頭インデックスです。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.Properties.Resources">
            <summary>
              ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.Properties.Resources.ResourceManager">
            <summary>
              このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.Properties.Resources.Culture">
            <summary>
              厳密に型指定されたこのリソース クラスを使用して、すべての検索リソースに対し、
              現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.Properties.Resources.CheckStateIsNotSupported">
             <summary>
               The appointed check state is not supported.
            In the case of a radio button, a check cannot be turned OFF.
            Please turn OFF the appointed radio button by turning ON the check of other radio buttons. に類似しているローカライズされた文字列を検索します。
             </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.Properties.Resources.SpinButtonHasNoBuddy">
            <summary>
              Corresponding edit box does not exist. に類似しているローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeIPAddress">
            <summary>
            WindowClassがSysIPAddress32のウィンドウに対応した操作を提供します。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeIPAddress.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeIPAddress.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeIPAddress.GetAddress(System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            IPアドレスを取得します。
            </summary>
            <param name="field0">フィールド0。</param>
            <param name="field1">フィールド1。</param>
            <param name="field2">フィールド2。</param>
            <param name="field3">フィールド3。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeIPAddress.EmulateChangeAddress(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            IPアドレスを変更します。
            IPN_FIELDCHANGEDの通知が発生します。
            </summary>
            <param name="field0">フィールド0。</param>
            <param name="field1">フィールド1。</param>
            <param name="field2">フィールド2。</param>
            <param name="field3">フィールド3。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeIPAddress.EmulateChangeAddress(System.Byte,System.Byte,System.Byte,System.Byte,Codeer.Friendly.Async)">
            <summary>
            IPアドレスを変更します。
            IPN_FIELDCHANGEDの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="field0">フィールド0。</param>
            <param name="field1">フィールド1。</param>
            <param name="field2">フィールド2。</param>
            <param name="field3">フィールド3。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeIPAddress.EmulateChangeAddressInTarget(System.IntPtr,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            IPアドレスを変更します。
            IPN_FIELDCHANGEDの通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="field0">フィールド0。</param>
            <param name="field1">フィールド1。</param>
            <param name="field2">フィールド2。</param>
            <param name="field3">フィールド3。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeIPAddress.GetAddressInTarget(System.IntPtr,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            IPアドレスを取得します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="field0">フィールド0。</param>
            <param name="field1">フィールド1。</param>
            <param name="field2">フィールド2。</param>
            <param name="field3">フィールド3。</param>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.TCITEM">
            <summary>
            MSDNのTCITEMを参照お願いします。
            文字列取得の場合は最適なサイズをライブラリ側で確保するため、cchTextMaxは使用しません。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.TCITEM_CORE">
            <summary>
            MSDNのTCITEMを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeSpinButton">
            <summary>
            WindowClassがmsctls_updown32のウィンドウに対応した操作を提供します。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeSpinButton.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeSpinButton.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeSpinButton.GetRange(System.Int32@,System.Int32@)">
            <summary>
            範囲を取得します。
            </summary>
            <param name="min">下限。</param>
            <param name="max">上限。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeSpinButton.EmulateChangePos(System.Int32)">
            <summary>
            現在位置を設定します。
            UDN_DELTAPOSの通知が発生します。
            また、ペアとなるEditにEN_CHANGE、EN_UPDATEの通知が発生します。
            また、WM_VSCROLLの通知も発生します。
            </summary>
            <param name="pos">現在位置。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeSpinButton.EmulateChangePos(System.Int32,Codeer.Friendly.Async)">
            <summary>
            現在位置を設定します。
            UDN_DELTAPOSの通知が発生します。
            また、ペアとなるEditにEN_CHANGE、EN_UPDATEの通知が発生します。
            また、WM_VSCROLLの通知も発生します。
            非同期で実行します。
            </summary>
            <param name="pos">現在位置。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeSpinButton.EmulateChangePosInTarget(System.IntPtr,System.Int32)">
            <summary>
            現在位置を設定します。
            現在の設定と異なる場合、UDN_DELTAPOSの通知が発生します。
            また、ペアとなるEditにEN_CHANGE、EN_UPDATEの通知が発生します。
            また、WM_VSCROLLの通知も発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="pos">現在位置。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeSpinButton.GetPosInTarget(System.IntPtr)">
            <summary>
            現在位置を取得。
            </summary>
            <param name="handle">ハンドル。</param>
            <returns>現在位置。</returns>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeSpinButton.Pos">
            <summary>
            現在位置です。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.LVIF">
            <summary>
            MSDNのLVIF_...を参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.RECT">
            <summary>
            MSDNのRECTを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeProgress">
            <summary>
            WindowClassがmsctls_progress32のウィンドウに対応した操作を提供します。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeProgress.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeProgress.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeProgress.Min">
            <summary>
            最小値です。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeProgress.Max">
            <summary>
            最大値です。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeProgress.Pos">
            <summary>
            現在位置です。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.Inside.Initializer">
            <summary>
            初期化。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.Initializer.Initialize(Codeer.Friendly.Windows.WindowsAppFriend,System.Type)">
            <summary>
            初期化。対象のアプリケーションにアセンブリを読み込ませます。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="myType">タイプ。</param>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.LVDISPINFO">
            <summary>
            MSDNのLVDISPINFOを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.SYSTEMTIME">
            <summary>
            MSDNのSYSTEMTIMEを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeDateTimePicker">
            <summary>
            WindowClassがSysDateTimePick32のウィンドウに対応した操作を提供します。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeDateTimePicker.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeDateTimePicker.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeDateTimePicker.EmulateSelectDay(System.DateTime)">
            <summary>
            現在時間を設定します。
            DTN_DATETIMECHANGEの通知が発生します。
            </summary>
            <param name="day">選択する日時。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeDateTimePicker.EmulateSelectDay(System.DateTime,Codeer.Friendly.Async)">
            <summary>
            現在時間を設定します。
            DTN_DATETIMECHANGEの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="day">選択する日時。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeDateTimePicker.EmulateSelectDayInTarget(System.IntPtr,System.DateTime)">
            <summary>
            現在時間を設定します。
            DTN_DATETIMECHANGEの通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="day">選択する日時。</param>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeDateTimePicker.SelectedDay">
            <summary>
            選択されている日時です。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.Inside.ResourcesLocal">
            <summary>
            ローカライズ済みリソース。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.ResourcesLocal.Initialize(Codeer.Friendly.Windows.WindowsAppFriend)">
            <summary>
            初期化。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.ResourcesLocal.Initialize">
            <summary>
            コンストラクタ。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeMessageBox">
            <summary>
            メッセージボックス対応クラス。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMessageBox.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタ。
            </summary>
            <param name="window">メッセージボックス本体。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMessageBox.EmulateButtonClick(System.String)">
            <summary>
            ボタンを押す。
            </summary>
            <param name="buttonWindowText">ボタンのウィンドウテキスト。</param>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeMessageBox.Window">
            <summary>
            本体ウィンドウ。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeMessageBox.Title">
            <summary>
            タイトルの取得。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeMessageBox.Message">
            <summary>
            メッセージの取得。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.LVIS">
            <summary>
            MSDNのLVIS_...を参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NMLISTVIEW">
            <summary>
            MSDNのNMLISTVIEWを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeSlider">
            <summary>
            WindowClassがmsctls_trackbar32のウィンドウに対応した操作を提供します。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeSlider.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeSlider.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeSlider.EmulateChangePos(System.Int32)">
            <summary>
            スクロールバーの現在位置を設定のための通知を発生させます。
            WM_HSCROLL、もしくはWM_VSCROLLの通知が発生します。
            スクロールのタイプはSB_THUMBTRACKです。
            </summary>
            <param name="pos">現在位置。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeSlider.EmulateChangePos(System.Int32,Codeer.Friendly.Async)">
            <summary>
            現在位置を設定します。
            WM_HSCROLL、もしくはWM_VSCROLLの通知が発生します。
            スクロールのタイプはSB_THUMBTRACKです。
            非同期で実行します。
            </summary>
            <param name="pos">現在位置。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeSlider.EmulateChangePosInTarget(System.IntPtr,System.Boolean,System.Int32)">
            <summary>
            現在位置を設定します。
            WM_HSCROLL、もしくはWM_VSCROLLの通知が発生します。
            スクロールのタイプはSB_THUMBTRACKです。
            Notify設定がある場合はTRBN_THUMBPOSCHANGINGの通知も発生します。
            nReasonはTB_THUMBTRACKです。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="isVertical">縦方向か。</param>
            <param name="pos">現在位置。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeSlider.GetPosInTarget(System.IntPtr)">
            <summary>
            現在位置を取得。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <returns>現在位置。</returns>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeSlider.IsVertical">
            <summary>
            縦スクロールバーであるか。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeSlider.Min">
            <summary>
            最小値です。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeSlider.Max">
            <summary>
            最大値を取得です。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeSlider.Pos">
            <summary>
            現在位置です。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar">
            <summary>
            WindowClassがSysMonthCal32のウィンドウに対応した操作を提供します。
            </summary>    
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.GetSelectionRange(System.DateTime@,System.DateTime@)">
            <summary>
            ユーザーによって現在選択されている日付範囲を取得します。
            複数選択の場合に使用します。
            </summary>
            <param name="min">最小日付。</param>
            <param name="max">最大日付。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.EmulateSelectDay(System.DateTime)">
            <summary>
            現在の選択日付を設定します。
            MCN_SELCHANGE、MCN_SELECTの通知が発生します。
            </summary>
            <param name="day">選択日付。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.EmulateSelectDay(System.DateTime,Codeer.Friendly.Async)">
            <summary>
            現在の選択日付を設定します。
            MCN_SELCHANGE、MCN_SELECTの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="day">選択する日時。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.EmulateSelectDay(System.DateTime,System.DateTime)">
            <summary>
            現在の選択範囲を設定します。
            複数選択の場合に使用します。
            MCN_SELCHANGE、MCN_SELECTの通知が発生します。
            </summary>
            <param name="min">最小日付。</param>
            <param name="max">最大日付。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.EmulateSelectDay(System.DateTime,System.DateTime,Codeer.Friendly.Async)">
            <summary>
            現在の選択範囲を設定します。
            複数選択の場合に使用します。
            MCN_SELCHANGE、MCN_SELECTの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="min">最小日付。</param>
            <param name="max">最大日付。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.EmulateChangeView(Codeer.Friendly.Windows.NativeStandardControls.MonthCalendarView)">
            <summary>
            表示モードを設定します。
            MCN_VIEWCHANGEの通知が発生します。
            </summary>
            <param name="view">表示モード。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.EmulateChangeView(Codeer.Friendly.Windows.NativeStandardControls.MonthCalendarView,Codeer.Friendly.Async)">
            <summary>
            表示モードを設定します。
            MCN_VIEWCHANGEの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="view">表示モード。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.GetSelectionRangeInTarget(System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.SYSTEMTIME[])">
            <summary>
            ユーザーによって現在選択されている日付範囲を取得します。
            複数選択の場合に使用します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="minMax">最小日付、最大日付。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.EmulateSelectDayInTarget(System.IntPtr,System.DateTime)">
            <summary>
            現在の選択日付を設定します。
            MCN_SELCHANGE、MCN_SELECTの通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="day">選択する日時。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.EmulateSelectDayInTarget(System.IntPtr,System.DateTime,System.DateTime)">
            <summary>
            現在の選択日付を設定します。
            MCN_SELCHANGE、MCN_SELECTの通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="min">最小日付。</param>
            <param name="max">最大日付。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.EmulateChangeViewInTarget(System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.MonthCalendarView)">
            <summary>
            表示モードを設定します。
            MCN_VIEWCHANGEの通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="view">表示モード。</param>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.MaxSelectionCount">
            <summary>
            選択できる最大日数です。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.Today">
            <summary>
            今日の日付です。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.SelectedDay">
            <summary>
            現在の選択日時です。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.MonthCalendarView">
            <summary>
            現在の表示モードを取得します。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeMonthCalendar.FirstDayOfWeek">
            <summary>
            カレンダーの左端の列に表示される曜日を取得します。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeButton">
            <summary>
            WindowClassがButtonのウィンドウに対応した操作を提供します。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeButton.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeButton.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeButton.EmulateClick">
            <summary>
            クリック。
            BN_CLICKEDの通知が発生します。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeButton.EmulateClick(Codeer.Friendly.Async)">
            <summary>
            クリック。
            BN_CLICKEDの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeButton.EmulateCheck(System.Windows.Forms.CheckState)">
            <summary>
            チェック状態設定。
            状態が変更された場合、BN_CLICKEDの通知が発生します。
            </summary>
            <param name="state">チェック状態。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeButton.EmulateCheck(System.Windows.Forms.CheckState,Codeer.Friendly.Async)">
            <summary>
            チェック状態設定。
            状態が変更された場合、BN_CLICKEDの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="state">チェック状態。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeButton.EmulateClickInTarget(System.IntPtr)">
            <summary>
            クリック。
            BN_CLICKEDの通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeButton.EmulateCheckInTarget(System.IntPtr,System.Windows.Forms.CheckState)">
            <summary>
            チェック状態設定。
            状態が変更された場合、BN_CLICKEDの通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="state">チェック状態。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeButton.GetCheckStateInTarget(System.IntPtr)">
            <summary>
            チェック状態取得。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <returns>チェック状態</returns>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeButton.CheckState">
            <summary>
            チェック状態。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.LVIR">
            <summary>
            MSDNのLVIR_...を参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.TVIF">
            <summary>
            MSDNのTVIF_...を参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NMIPADDRESS">
            <summary>
            MSDNのLVCOLUMNを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl">
            <summary>
            WindowClassがSysListView32のウィンドウに対応した操作を提供します。
            </summary>    
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.GetItem(Codeer.Friendly.Windows.NativeStandardControls.LVITEM)">
            <summary>
            アイテムを取得します。
            </summary>
            <param name="item">アイテム。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.GetItemState(System.Int32,Codeer.Friendly.Windows.NativeStandardControls.LVIS)">
            <summary>
            アイテム状態を取得します。
            </summary>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="stateMask">状態マスク。</param>
            <returns>アイテム状態。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.GetItemRect(System.Int32,Codeer.Friendly.Windows.NativeStandardControls.LVIR)">
            <summary>
            アイテム矩形を取得します。
            </summary>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="area">どの部分に概説する矩形かを指定します。</param>
            <returns>アイテム矩形。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.GetSubItemRect(System.Int32,System.Int32,Codeer.Friendly.Windows.NativeStandardControls.LVIR)">
            <summary>
            サブアイテムに外接する矩形を取得します。
            </summary>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="subItemIndex">サブアイテムインデックス。</param>
            <param name="area">どの部分に概説する矩形かを指定します。</param>
            <returns>サブアイテム矩形。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.GetColumn(System.Int32,Codeer.Friendly.Windows.NativeStandardControls.LVCOLUMN)">
            <summary>
            列情報を取得します。
            </summary>
            <param name="col">列。</param>
            <param name="column">列情報。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.GetItemText(System.Int32,System.Int32)">
            <summary>
            アイテム文字列を取得します。
            </summary>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="subItemIndex">サブアイテムインデックス。</param>
            <returns>アイテム文字列。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.FindItem(System.Int32,System.Int32,System.String)">
            <summary>
            指定のテキストのアイテムを検索します。
            </summary>
            <param name="findStart">検索開始インデックス。</param>
            <param name="targetSubItemIndex">検索対象のサブアイテムインデックス。</param>
            <param name="text">テキスト。</param>
            <returns>アイテムインデックス。未発見時は-1が返ります。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.GetItemData(System.Int32)">
            <summary>
            アイテムデータを取得します。
            </summary>
            <param name="itemIndex">アイテムインデックス。</param>
            <returns>アイテムデータ。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.EnsureVisible(System.Int32,System.Boolean)">
            <summary>
            指定のアイテムを可視領域に表示します。
            </summary>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="partialOK">部分表示を許容するかを指定します。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.EmulateChangeItem(Codeer.Friendly.Windows.NativeStandardControls.LVITEM)">
            <summary>
            アイテムの内容を変更します。
            変更内容に応じて通知が発生します。
            </summary>
            <param name="item">アイテム。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.EmulateChangeItem(Codeer.Friendly.Windows.NativeStandardControls.LVITEM,Codeer.Friendly.Async)">
            <summary>
            アイテムの内容を変更します。
            変更内容に応じて通知が発生します。
            非同期で実行します。
            </summary>
            <param name="item">アイテム。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.EmulateEdit(System.Int32,System.String)">
            <summary>
            指定のアイテムを編集します。
            LVN_BEGINLABELEDIT、LVN_ENDLABELEDITが発生します。
            </summary>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="text">テキスト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.EmulateEdit(System.Int32,System.String,Codeer.Friendly.Async)">
            <summary>
            指定のアイテムを編集します。
            LVN_BEGINLABELEDIT、LVN_ENDLABELEDITが発生します。
            非同期で実行します。
            </summary>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="text">テキスト。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.EmulateCancelEdit">
            <summary>
            編集キャンセル。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.EmulateCancelEdit(Codeer.Friendly.Async)">
            <summary>
             編集キャンセル。
            </summary>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.EmulateSelect(System.Int32,System.Boolean)">
            <summary>
            アイテムの選択状態を変更します。
            LVN_ITEMCHANGING, LVN_ITEMCHANGEDの通知が発生します。
            </summary>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="isSelect">選択状態。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.EmulateSelect(System.Int32,System.Boolean,Codeer.Friendly.Async)">
            <summary>
            アイテムの選択状態を変更します。
            LVN_ITEMCHANGING, LVN_ITEMCHANGEDの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="isSelect">選択状態。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.EmulateChangeItemState(System.Int32,Codeer.Friendly.Windows.NativeStandardControls.LVIS,Codeer.Friendly.Windows.NativeStandardControls.LVIS)">
            <summary>
            状態を変更します。
            LVN_ITEMCHANGING, LVN_ITEMCHANGEDの通知が発生します。
            </summary>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="mask">状態マスク。</param>
            <param name="state">状態。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.EmulateChangeItemState(System.Int32,Codeer.Friendly.Windows.NativeStandardControls.LVIS,Codeer.Friendly.Windows.NativeStandardControls.LVIS,Codeer.Friendly.Async)">
            <summary>
            状態を変更します。
            LVN_ITEMCHANGING, LVN_ITEMCHANGEDの通知が発生します。
            </summary>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="mask">状態マスク。</param>
            <param name="state">状態。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.EmulateChangeItemStateInTarget(System.IntPtr,System.Int32,Codeer.Friendly.Windows.NativeStandardControls.LVIS,Codeer.Friendly.Windows.NativeStandardControls.LVIS)">
            <summary>
            状態を変更します。
            LVN_ITEMCHANGING, LVN_ITEMCHANGEDの通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="mask">状態マスク。</param>
            <param name="state">状態。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.GetColumnInTarget(System.IntPtr,System.Int32,Codeer.Friendly.Windows.NativeStandardControls.LVCOLUMN)">
            <summary>
            列情報を取得します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="col">列。</param>
            <param name="column">列情報。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.FindItemInTarget(System.IntPtr,System.Int32,System.Int32,System.String)">
            <summary>
            指定のテキストのアイテムを検索します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="findStart">検索開始インデックス。</param>
            <param name="targetSubItemIndex">検索対象のサブアイテムインデックス。</param>
            <param name="text">テキスト。</param>
            <returns>アイテムインデックス。未発見時は-1が返ります。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.GetItemCore(System.Boolean,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.LVITEM)">
            <summary>
            アイテムを取得します。
            </summary>
            <param name="isUni">ユニコードであるか。</param>
            <param name="message">メッセージ。</param>
            <param name="wParam">WPARAM。</param>
            <param name="item">アイテム。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.GetItemCoreInTarget(System.IntPtr,System.Boolean,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.LVITEM)">
            <summary>
            アイテムを取得します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="isUni">ユニコードであるか。</param>
            <param name="message">メッセージ。</param>
            <param name="wParam">WPARAM。</param>
            <param name="item">アイテム。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.SelectedIndicesInTarget(System.IntPtr)">
            <summary>
            選択されているアイテムのインデックスを取得します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <returns>選択されているアイテムのインデックス。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.GetNextItemInTarget(System.IntPtr,System.Int32,Codeer.Friendly.Windows.NativeStandardControls.LVIS)">
            <summary>
            指定の条件を満たすアイテムを取得します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="flags">取得方向フラグ。</param>
            <returns>アイテムインデックス。未発見時は-1を返します。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.GetFirstSelectedItemPositionInTarget(System.IntPtr)">
            <summary>
            最初に選択した項目の位置を取得します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <returns>アイテム位置情報。選択されていない場合はIntPtr.Zeroが返ります。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.GetNextSelectedItemInTarget(System.IntPtr,System.IntPtr@)">
            <summary>
            選択されているアイテムのインデックスを返します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="pos">アイテム位置情報。次の値に更新されます。</param>
            <returns>アイテムインデックス。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.EmulateChangeItemInTarget(System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.LVITEM)">
            <summary>
            アイテムの内容を変更します。
            LVN_ITEMCHANGING, LVN_ITEMCHANGEDの通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="item">アイテム。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.EmulateEditInTarget(System.IntPtr,System.Int32,System.String,System.Int32[])">
            <summary>
            指定のアイテムを編集します。
            LVN_BEGINLABELEDIT、LVN_ENDLABELEDITが発生します。
            非同期で実行します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="text">テキスト。</param>
            <param name="currentSelected">現在の選択項目。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.GetItemStateInTarget(System.IntPtr,System.Int32,Codeer.Friendly.Windows.NativeStandardControls.LVIS)">
            <summary>
            アイテム状態を取得します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="itemIndex">アイテムインデックス。</param>
            <param name="stateMask">状態マスク。</param>
            <returns>アイテム状態。</returns>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.ItemCount">
            <summary>
            アイテムの数です。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.SelectedIndices">
            <summary>
            選択されているアイテムのインデックスです。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.TopIndex">
            <summary>
            先頭インデックスです。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeListControl.View">
            <summary>
            表示モードを取得します。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeEdit">
            <summary>
            WindowClassがEdit、RichEdit20A、RichEdit20Wのウィンドウに対応した操作を提供します。
            </summary>    
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeEdit.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeEdit.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeEdit.GetSelection(System.Int32@,System.Int32@)">
            <summary>
            選択範囲を取得します。
            </summary>
            <param name="startChar">開始文字インデックス。</param>
            <param name="endChar">終了文字インデックス。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeEdit.EmulateChangeText(System.String)">
            <summary>
            テキストを変更します。
            EN_CHANGE、EN_UPDATEの通知が発生します。
            RichEdit20A、RichEdit20Wの場合は、イベントマスクが設定されている場合のみ通知が発生します。
            </summary>
            <param name="newText">新たなテキスト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeEdit.EmulateChangeText(System.String,Codeer.Friendly.Async)">
            <summary>
            テキストを変更します。
            EN_CHANGE、EN_UPDATEの通知が発生します。
            RichEdit20A、RichEdit20Wの場合は、イベントマスクが設定されている場合のみ通知が発生します。
            非同期で実行します。
            </summary>
            <param name="newText">新たなテキスト。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeEdit.EmulateChangeSelection(System.Int32,System.Int32)">
            <summary>
            選択を設定します。
            開始位置が0で終了位置が-1のときは、すべてのテキストが選択されます。開始位置が-1のときは、現在の選択が解除されます。
            RichEdit20A、RichEdit20Wの場合は、イベントマスクが設定されていれば、EN_SELCHANGEの通知が発生します。
            </summary>
            <param name="startChar">開始文字列</param>
            <param name="endChar">終了文字列</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeEdit.EmulateChangeSelection(System.Int32,System.Int32,Codeer.Friendly.Async)">
            <summary>
            選択を設定します。
            開始位置が0で終了位置が-1のときは、すべてのテキストが選択されます。開始位置が-1のときは、現在の選択が解除されます。
            RichEdit20A、RichEdit20Wの場合は、イベントマスクが設定されていれば、EN_SELCHANGEの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="startChar">開始文字列</param>
            <param name="endChar">終了文字列</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeEdit.EmulateChangeTextInTarget(System.IntPtr,System.String)">
            <summary>
            テキストを変更します。
            EN_UPDATE、EN_CHANGEの通知が発生します。
            RichEdit20A、RichEdit20Wの場合は、イベントマスクが設定されている場合のみ通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="newText">新たなテキスト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeEdit.EmulateChangeSelectionInTarget(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            選択を設定します。
            開始位置が0で終了位置が-1のときは、すべてのテキストが選択されます。開始位置が-1のときは、現在の選択が解除されます。
            RichEdit20A、RichEdit20Wの場合は、イベントマスクが設定されていれば、EN_SELCHANGEの通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="startChar">開始文字列。</param>
            <param name="endChar">終了文字列。</param>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeEdit.Text">
            <summary>
            テキストです。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeEdit.LineCount">
            <summary>
            行数です。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeEdit.FirstVisibleLine">
            <summary>
            一番上の可視行です。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.LVITEM">
            <summary>
            MSDNのLVITEMを参照お願いします。
            文字列取得の場合は最適なサイズをライブラリ側で確保するため、cchTextMaxは使用しません。
            cColumnsはpuColumns、piColFmtのサイズで表現されるため、必要ありません。
            puColumns、piColFmtのサイズは同一である必要があります。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.LVITEM_CORE">
            <summary>
            MSDNのLVITEMを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.TCIF">
            <summary>
            MSDNのTCIF_...を参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NMTRBTHUMBPOSCHANGING">
            <summary>
            MSDNのNMTRBTHUMBPOSCHANGINGを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NMSELCHANGE">
            <summary>
            MSDNのLVCOLUMNを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NMHDR">
            <summary>
            MSDNのNMHDRを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox">
            <summary>
            WindowClassがComboBox、ComboBoxEx32のウィンドウに対応した操作を提供します。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.GetItemData(System.Int32)">
            <summary>
            アイテムデータを取得します。
            </summary>
            <param name="index">インデックス。</param>
            <returns>アイテムデータ。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.GetItemText(System.Int32)">
            <summary>
            指定のインデックスのテキストを取得します。
            </summary>
            <param name="index">インデックス。</param>
            <returns>テキスト。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.FindItem(System.Int32,System.String)">
            <summary>
            指定のテキストのアイテムを検索します。
            </summary>
            <param name="findStart">検索開始インデックス。</param>
            <param name="text">テキスト。</param>
            <returns>アイテムインデックス。未発見時は-1が返ります。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.EmulateSelectItem(System.Int32)">
            <summary>
            アイテムを選択します。
            選択位置の変更があった場合、CBN_SELENDOK、CBN_SELCHANGEの通知が発生します。
            ComboBoxEx32でドロップダウンリストでない場合はCBN_EDITCHANGEも発生します。
            </summary>
            <param name="index">アイテムのインデックス。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.EmulateSelectItem(System.Int32,Codeer.Friendly.Async)">
            <summary>
            アイテムを選択します。
            選択位置の変更があった場合、CBN_SELENDOK、CBN_SELCHANGEの通知が発生します。
            ComboBoxEx32でドロップダウンリストでない場合はCBN_EDITCHANGEも発生します。
            非同期で実行します。
            </summary>
            <param name="index">アイテムのインデックス。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.EmulateChangeEditText(System.String)">
            <summary>
            エディタのテキストを変更します。
            CBN_EDITCHANGEの通知が発生します。
            ComboBoxの場合はCBN_EDITUPDATEの通知も発生します。
            </summary>
            <param name="newText">新たなテキスト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.EmulateChangeEditText(System.String,Codeer.Friendly.Async)">
            <summary>
            エディタのテキストを変更します。
            CBN_EDITCHANGEの通知が発生します。
            ComboBoxの場合はCBN_EDITUPDATEの通知も発生します。
            非同期で実行します。
            </summary>
            <param name="newText">新たなテキスト。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.EmulateChangeDropDownVisible(System.Boolean)">
            <summary>
            リストの表示、非表示を設定します。
            表示した場合はCBN_DROPDOWN、閉じた場合はCBN_CLOSEUPの通知が発生します。
            </summary>
            <param name="visible">表示するか。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.EmulateChangeDropDownVisible(System.Boolean,Codeer.Friendly.Async)">
            <summary>
            リストの表示、非表示を設定します。
            表示した場合はCBN_DROPDOWN、閉じた場合はCBN_CLOSEUPの通知が発生します。
            非同期で実行します。
            </summary>
            <param name="visible">表示するか。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.GetLBTextInTarget(System.IntPtr,System.Int32)">
            <summary>
            指定のインデックスのテキストを取得します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="index">インデックス。</param>
            <returns>テキスト。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.FindItemInTarget(System.IntPtr,System.Int32,System.String)">
            <summary>
            指定のテキストのアイテムを検索します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="findStart">検索開始インデックス。</param>
            <param name="text">テキスト。</param>
            <returns>アイテムインデックス。未発見時は-1が返ります。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.EmulateSelectItemInTarget(System.IntPtr,System.Int32)">
            <summary>
            アイテムを選択します。
            選択位置の変更があった場合、CBN_SELENDOK、CBN_SELCHANGEの通知が発生します。
            ComboBoxEx32でドロップダウンリストでない場合はCBN_EDITCHANGEも発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="index">アイテムのインデックス。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.EmulateChangeEditTextInTarget(System.IntPtr,System.String)">
            <summary>
            エディタのテキストを変更します。
            CBN_EDITCHANGEの通知が発生します。
            ComboBoxの場合はCBN_EDITUPDATEの通知も発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="newText">新たなテキスト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.EmulateChangeDropDownVisibleInTarget(System.IntPtr,System.Boolean)">
            <summary>
            リストの表示、非表示を設定します。
            表示した場合はCBN_DROPDOWN、閉じた場合はCBN_SELENDCANCEL、CBN_CLOSEUPの通知が発生します。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="visible">表示するか。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.IsExInTarget(System.IntPtr)">
            <summary>
            ComboBoxEx32であるか。
            </summary>
            <returns>ComboBoxEx32であるか。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.GetCurSelInTarget(System.IntPtr)">
            <summary>
            現在の選択インデックスを取得。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <returns>現在の選択インデックス。</returns>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.ItemCount">
            <summary>
            アイテム数です。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.SelectedItemIndex">
            <summary>
            現在選択されているアイテムのインデックスです。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeComboBox.Text">
            <summary>
            現在選択の文字列です。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeScrollBar">
            <summary>
            WindowClassがScrollBarのウィンドウに対応した操作を提供します。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeScrollBar.#ctor(Codeer.Friendly.Windows.Grasp.WindowControl)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="src">元となるウィンドウコントロールです。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeScrollBar.#ctor(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr)">
            <summary>
            コンストラクタです。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="windowHandle">ウィンドウハンドル。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeScrollBar.GetScrollRange(System.Int32@,System.Int32@)">
            <summary>
            スクロールの範囲を取得します。
            </summary>
            <param name="min">下限。</param>
            <param name="max">上限。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeScrollBar.EmulateScroll(System.Int32)">
            <summary>
            スクロールバーの現在位置を設定のための通知を発生させます。
            WM_HSCROLL、もしくはWM_VSCROLLの通知が発生します。
            スクロールのタイプはSB_THUMBTRACKです。
            </summary>
            <param name="pos">現在位置。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeScrollBar.EmulateScroll(System.Int32,Codeer.Friendly.Async)">
            <summary>
            スクロールバーの現在位置を設定します。
            WM_HSCROLL、もしくはWM_VSCROLLの通知が発生します。
            スクロールのタイプはSB_THUMBTRACKです。
            非同期で実行します。
            </summary>
            <param name="pos">現在位置。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.NativeScrollBar.EmulateScrollInTarget(System.IntPtr,System.Boolean,System.Int32)">
            <summary>
            スクロールバーの現在位置を設定のための通知を発生させます。
            WM_HSCROLL、もしくはWM_VSCROLLの通知が発生します。
            スクロールのタイプはSB_THUMBTRACKです。
            </summary>
            <param name="handle">ウィンドウハンドル。</param>
            <param name="isVertical">縦スクロールバーであるか。</param>
            <param name="pos">現在位置。</param>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeScrollBar.IsVertical">
            <summary>
            縦スクロールバーであるか。
            </summary>
        </member>
        <member name="P:Codeer.Friendly.Windows.NativeStandardControls.NativeScrollBar.ScrollPos">
            <summary>
            スクロールバーの現在位置です。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.TVIS">
            <summary>
            MSDNのTVIS_...を参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NMTVDISPINFO">
            <summary>
            MSDNのNMTVDISPINFOを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.Inside.EmulateUtility">
            <summary>
            エミュレートのためのユーティリティーです。
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.EmulateUtility.SendCommand(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr,System.Int32)">
            <summary>
            WM_COMMANDを通知します。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="handle">ハンドル。</param>
            <param name="code">通知コード。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.EmulateUtility.SendCommand(Codeer.Friendly.Windows.WindowsAppFriend,System.IntPtr,System.Int32,Codeer.Friendly.Async)">
            <summary>
            WM_COMMANDを通知します。
            非同期で実行します。
            </summary>
            <param name="app">アプリケーション操作クラス。</param>
            <param name="handle">ハンドル。</param>
            <param name="code">通知コード。</param>
            <param name="async">非同期実行オブジェクト。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.EmulateUtility.SendCommand(System.IntPtr,System.Int32)">
            <summary>
            WM_COMMANDを通知します。
            </summary>
            <param name="handle">ハンドル。</param>
            <param name="code">通知コード。</param>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.EmulateUtility.InitNotify(System.IntPtr,System.Int32,Codeer.Friendly.Windows.NativeStandardControls.NMHDR@)">
            <summary>
            WM_NOTIFYを通知します。
            対象アプリケーション内部で実行する必要があります。
            </summary>
            <param name="handle">ハンドル。</param>
            <param name="code">通知コード。</param>
            <param name="header">ヘッダ。</param>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NMUPDOWN">
            <summary>
            MSDNのNMTVDISPINFOを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.NativeCommonDefine">
            <summary>
            共通定義。
            詳細な情報はMSDNの同名の定義を参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.MonthCalendarView">
            <summary>
            SysMonthCal32の表示タイプ
            </summary>
        </member>
        <member name="F:Codeer.Friendly.Windows.NativeStandardControls.MonthCalendarView.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Codeer.Friendly.Windows.NativeStandardControls.MonthCalendarView.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="F:Codeer.Friendly.Windows.NativeStandardControls.MonthCalendarView.Decade">
            <summary>
            10年
            </summary>
        </member>
        <member name="F:Codeer.Friendly.Windows.NativeStandardControls.MonthCalendarView.Century">
            <summary>
            世紀
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.LVCOLUMN">
            <summary>
            MSDNのLVCOLUMNを参照お願いします。
            文字列取得の場合は最適なサイズをライブラリ側で確保するため、cchTextMaxは使用しません。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.LVCOLUMN_CORE">
            <summary>
            MSDNのLVCOLUMNを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.LVCF">
            <summary>
            MSDNのLVCF_...を参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.TVHITTESTINFO">
            <summary>
            MSDNのTVHITTESTINFOを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.TCIS">
            <summary>
            MSDNのTCIS_...を参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.POINT">
            <summary>
            MSDNのPOINTを参照お願いします。
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods">
            <summary>
            ネイティブメソッド
            </summary>
        </member>
        <member name="F:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.WH_GETMESSAGE">
            <summary>
            GetMessgeへのインストール
            </summary>
        </member>
        <member name="F:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.WH_CALLWNDPROC">
            <summary>
            WndProcへのインストール
            </summary>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.GetFocus">
            <summary>
            フォーカスウィンドウを取得
            </summary>
            <returns></returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.Text.StringBuilder)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.String)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.Int32[])">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.SYSTEMTIME@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.SYSTEMTIME[])">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.TCITEM_CORE@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.LVITEM_CORE@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.LVCOLUMN_CORE@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.TVITEMEX_CORE@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.NMHDR@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.NMDATETIMECHANGE@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.NMIPADDRESS@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.NMTRBTHUMBPOSCHANGING@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.NMUPDOWN@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.NMSELCHANGE@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.RECT@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.NMTREEVIEW@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.TVHITTESTINFO@)">
            <summary>
            メッセージを送信します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="msg">メッセージ。</param>
            <param name="wParam">wParam。</param>
            <param name="lParam">lParam。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.ScreenToClient(System.IntPtr,Codeer.Friendly.Windows.NativeStandardControls.POINT@)">
            <summary>
            スクリーン座標からクライアント座標に変換
            </summary>
            <param name="hWnd">ウィンドウハンドル</param>
            <param name="lpPoint">ポイント</param>
            <returns></returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.IsWindowVisible(System.IntPtr)">
            <summary>
            ウィンドウが表示状態であるか。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <returns></returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.IsWindowEnabled(System.IntPtr)">
            <summary>
            ウィンドウが有効状態であるか。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <returns>ウィンドウが有効状態であるか。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SetWindowText(System.IntPtr,System.String)">
            <summary>
            ウィンドウテキストの設定。
            </summary>
            <param name="hwnd">ウィンドウハンドル。</param>
            <param name="lpString">設定文字列。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            Window文字列取得。
            </summary>
            <param name="hWnd">ハンドル。</param>
            <param name="lpString">文字列格納バッファ。</param>
            <param name="nMaxCount">最大文字列。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.GetWindowTextLength(System.IntPtr)">
            <summary>
            ウィンドウテキストの長さを取得する。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <returns>ウィンドウテキストの長さ。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SetFocus(System.IntPtr)">
            <summary>
            フォーカスの設定。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <returns>前のフォーカスウィンドウハンドル。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.GetScrollPos(System.IntPtr,System.Int32)">
            <summary>
            スクロール位置を取得します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="nBar">バーの種類。</param>
            <returns>位置。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SetScrollPos(System.IntPtr,System.Int32,System.Int32,System.Boolean)">
            <summary>
            スクロール位置を設定します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="nBar">スクロールバーの種類。</param>
            <param name="nPos">スクロール位置。</param>
            <param name="bRedraw">再描画を実施するか。</param>
            <returns></returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.GetScrollRange(System.IntPtr,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            スクロールバーの種類を設定します。
            </summary>
            <param name="hWnd">ウインドウハンドル。</param>
            <param name="nBar">スクロールバーの種類。</param>
            <param name="lpMinPos">下限。</param>
            <param name="lpMaxPos">上限。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            クラス名称を取得。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="lpClassName">クラス名称格納バッファ。</param>
            <param name="nMaxCount">最大文字数。</param>
            <returns>文字サイズ。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.GetDlgCtrlID(System.IntPtr)">
            <summary>
            ダイアログIDの取得。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <returns>ダイアログID。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.GetParent(System.IntPtr)">
            <summary>
            親ウィンドウを取得する。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <returns>親ウィンドウ。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.IsWindowUnicode(System.IntPtr)">
            <summary>
            ユニコードウィンドウであるか。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <returns>ユニコードウィンドウであるか。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.GetKeyboardState(System.Byte[])">
            <summary>
            キーボード状態取得。
            </summary>
            <param name="keys">キーボード状態。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SetKeyboardState(System.Byte[])">
            <summary>
            キーボード状態設定。
            </summary>
            <param name="keys">キーボード状態。</param>
            <returns>成否。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.GetWindowLongPtr(System.IntPtr,System.Int32)">
            <summary>
            指定されたウィンドウに関する情報を取得します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="nIndex">操作種別。</param>
            <returns>結果。</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.GetWindowLongPtr64(System.IntPtr,System.Int32)">
            <summary>
            指定されたウィンドウに関する情報を取得します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="nIndex">操作種別。</param>
            <returns>結果</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.GetWindowLongPtr32(System.IntPtr,System.Int32)">
            <summary>
            指定されたウィンドウに関する情報を取得します。
            </summary>
            <param name="hWnd">ウィンドウハンドル。</param>
            <param name="nIndex">操作種別。</param>
            <returns>結果</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.SetWindowsHookEx(System.Int32,Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.HookProc,System.IntPtr,System.Int32)">
            <summary>
            ウィンドウフックの設定
            </summary>
            <param name="hookType">フック種別</param>
            <param name="lpfn">コールバック</param>
            <param name="hMod">モジュールハンドル</param>
            <param name="dwThreadId">スレッドID</param>
            <returns>フックハンドル</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
            アンフック
            </summary>
            <param name="hookHandle">フックハンドル</param>
            <returns>成否</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            次のフック呼び出し
            </summary>
            <param name="hookHandle">フックハンドル</param>
            <param name="nCode">コード</param>
            <param name="wParam">wParam</param>
            <param name="lParam">lParam</param>
            <returns>結果</returns>
        </member>
        <member name="M:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
            <summary>
            指定のウィンドウハンドルの所属するスレッドとプロセスの取得
            </summary>
            <param name="hWnd">ウィンドウハンドル</param>
            <param name="lpdwProcessId">プロセスID</param>
            <returns>スレッドID</returns>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.HookProc">
            <summary>
            フックプロック
            </summary>
            <param name="code">コード</param>
            <param name="wParam">wParam</param>
            <param name="lParam">lParam</param>
            <returns>結果</returns>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.CWPSTRUCT">
            <summary>
            WndProcメッセージ情報
            </summary>
        </member>
        <member name="T:Codeer.Friendly.Windows.NativeStandardControls.Inside.NativeMethods.MSG">
            <summary>
            メッセージ情報
            </summary>
        </member>
    </members>
</doc>
